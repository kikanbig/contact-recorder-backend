const express = require('express');
const cors = require('cors');
const path = require('path');
const { Client } = require('pg');

// –ò–º–ø–æ—Ä—Ç —Ä–æ—É—Ç–æ–≤
const authRoutes = require('./routes/auth');
const locationsRoutes = require('./routes/locations');
const recordingRoutes = require('./routes/recordings');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–æ–≤
app.use('/api/auth', authRoutes);
app.use('/api/locations', locationsRoutes);
app.use('/api/recordings', recordingRoutes);

// –û—Å–Ω–æ–≤–Ω–æ–π endpoint
app.get('/', (req, res) => {
  res.json({
    message: 'Contact Recorder API —Ä–∞–±–æ—Ç–∞–µ—Ç!',
    version: '2.0.0',
    features: [
      '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
      '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏—è–º–∏',
      '–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ'
    ],
    status: 'active',
    timestamp: new Date().toISOString()
  });
});

// Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
app.get('/health', (req, res) => {
  res.json({
    status: 'healthy',
    uptime: process.uptime(),
    memory: process.memoryUsage(),
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV || 'development'
  });
});

// Endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
app.get('/db-test', async (req, res) => {
  try {
    const client = new Client({
      connectionString: process.env.DATABASE_URL,
      ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
    });
    
    await client.connect();
    const result = await client.query('SELECT NOW() as current_time, version() as postgres_version');
    await client.end();
    
    res.json({
      status: 'success',
      message: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!',
      database_time: result.rows[0].current_time,
      postgres_version: result.rows[0].postgres_version.split(' ')[0] + ' ' + result.rows[0].postgres_version.split(' ')[1],
      database_url_exists: !!process.env.DATABASE_URL
    });
  } catch (error) {
    res.status(500).json({
      status: 'error',
      message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
      error: error.message,
      database_url_exists: !!process.env.DATABASE_URL
    });
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, '0.0.0.0', () => {
  console.log(`üöÄ Server running on port ${PORT}`);
  console.log(`üìä DATABASE_URL status: ${process.env.DATABASE_URL ? '‚úÖ configured' : '‚ùå not configured'}`);
  
  console.log('\nüìã Available endpoints:');
  console.log('  GET  / - API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è');
  console.log('  GET  /health - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞');
  console.log('  GET  /db-test - –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
  console.log('  POST /api/auth/login - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
  console.log('  GET  /api/auth/me - –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  console.log('  GET  /api/locations - –°–ø–∏—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–π');
  console.log('  POST /api/recordings/upload - –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–∏');
  console.log('  GET  /api/recordings - –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π');
  console.log('  GET  /api/recordings/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–∏—Å–µ–π');
  console.log('  POST /api/recordings/:id/transcribe - –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–ø–∏—Å–∏');
  console.log('  GET  /api/recordings/:id/transcription - –ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é');
});
