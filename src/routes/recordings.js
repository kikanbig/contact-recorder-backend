const express = require('express');
const jwt = require('jsonwebtoken');
const fs = require('fs');
const path = require('path');
const multer = require('multer');
const { OpenAI } = require('openai');
const { db } = require('../models/database');

const router = express.Router();
const JWT_SECRET = process.env.JWT_SECRET || 'contact-recorder-secret-key';

// OpenAI –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const openai = OPENAI_API_KEY ? new OpenAI({ apiKey: OPENAI_API_KEY }) : null;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const upload = multer({
  dest: 'uploads/',
  limits: { fileSize: 50 * 1024 * 1024 }, // 50MB
  fileFilter: (req, file, cb) => {
    const allowedTypes = ['audio/mpeg', 'audio/mp4', 'audio/m4a', 'audio/wav', 'audio/webm', 'audio/aac'];
    if (allowedTypes.includes(file.mimetype) || file.originalname.match(/\.(m4a|mp3|wav|aac|webm)$/i)) {
      cb(null, true);
    } else {
      cb(new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞'), false);
    }
  }
});

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
async function authenticateToken(req, res, next) {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    
    if (!token) {
      return res.status(401).json({
        success: false,
        message: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
      });
    }

    const decoded = jwt.verify(token, JWT_SECRET);
    const user = await db.getUserById(decoded.userId);
    
    if (!user) {
      return res.status(401).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    req.user = user;
    next();
  } catch (error) {
    res.status(401).json({
      success: false,
      message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω'
    });
  }
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
function requireAdmin(req, res, next) {
  if (req.user.role !== 'admin') {
    return res.status(403).json({
      success: false,
      message: '–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
    });
  }
  next();
}

// POST /api/recordings/upload - –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ (–¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
router.post('/upload', authenticateToken, upload.single('audio'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({
        success: false,
        message: '–ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
      });
    }

    const { 
      location_id, 
      duration_seconds,
      recording_date,
      metadata
    } = req.body;

    console.log('üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª:', req.file.originalname);
    console.log('üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:', req.file.size, '–±–∞–π—Ç');
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', req.user.username);
    console.log('üìç –õ–æ–∫–∞—Ü–∏—è:', location_id);

    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –≤ base64 –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ PostgreSQL
    const audioData = fs.readFileSync(req.file.path);

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const recording = await db.createRecording({
      user_id: req.user.id,
      location_id: location_id ? parseInt(location_id) : null,
      filename: `${Date.now()}_${req.file.originalname}`,
      original_filename: req.file.originalname,
      file_path: req.file.path,
      file_size: req.file.size,
      duration_seconds: duration_seconds ? parseInt(duration_seconds) : null,
      mime_type: req.file.mimetype,
      audio_data: audioData,
      recording_date: recording_date ? new Date(recording_date) : new Date(),
      metadata: metadata ? JSON.parse(metadata) : null
    });

    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.unlink(req.file.path, (err) => {
      if (err) console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', err);
    });

    res.json({
      success: true,
      message: '–ê—É–¥–∏–æ —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω',
      recording: {
        id: recording.id,
        filename: recording.filename,
        duration_seconds: recording.duration_seconds,
        file_size: recording.file_size,
        uploaded_at: recording.uploaded_at,
        status: recording.status
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞'
    });
  }
});

// GET /api/recordings - –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/', authenticateToken, async (req, res) => {
  try {
    const limit = parseInt(req.query.limit) || 50;
    const offset = parseInt(req.query.offset) || 0;
    
    const recordings = await db.getRecordingsByUser(req.user.id, limit, offset);
    
    res.json({
      success: true,
      recordings: recordings.map(recording => ({
        id: recording.id,
        filename: recording.original_filename,
        duration_seconds: recording.duration_seconds,
        file_size: recording.file_size,
        location_name: recording.location_name,
        recording_date: recording.recording_date,
        uploaded_at: recording.uploaded_at,
        status: recording.status,
        has_transcription: !!recording.transcription,
        transcribed_at: recording.transcribed_at
      })),
      pagination: {
        limit,
        offset,
        has_more: recordings.length === limit
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π'
    });
  }
});

// GET /api/recordings/admin - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
router.get('/admin', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const limit = parseInt(req.query.limit) || 100;
    const offset = parseInt(req.query.offset) || 0;
    
    const recordings = await db.getAllRecordings(limit, offset);
    
    res.json({
      success: true,
      recordings: recordings.map(recording => ({
        id: recording.id,
        filename: recording.original_filename,
        duration_seconds: recording.duration_seconds,
        file_size: recording.file_size,
        user: {
          id: recording.user_id,
          username: recording.username,
          full_name: recording.full_name
        },
        location: {
          id: recording.location_id,
          name: recording.location_name,
          address: recording.location_address
        },
        recording_date: recording.recording_date,
        uploaded_at: recording.uploaded_at,
        status: recording.status,
        has_transcription: !!recording.transcription,
        transcribed_at: recording.transcribed_at,
        transcription_preview: recording.transcription ? recording.transcription.substring(0, 100) + '...' : null
      })),
      pagination: {
        limit,
        offset,
        has_more: recordings.length === limit
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∞:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π'
    });
  }
});

// GET /api/recordings/:id - –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å
router.get('/:id', authenticateToken, async (req, res) => {
  try {
    const recording = await db.getRecordingById(req.params.id);
    
    if (!recording) {
      return res.status(404).json({
        success: false,
        message: '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (req.user.role !== 'admin' && recording.user_id !== req.user.id) {
      return res.status(403).json({
        success: false,
        message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'
      });
    }

    res.json({
      success: true,
      recording: {
        id: recording.id,
        filename: recording.original_filename,
        duration_seconds: recording.duration_seconds,
        file_size: recording.file_size,
        user: {
          id: recording.user_id,
          username: recording.username,
          full_name: recording.full_name
        },
        location: {
          id: recording.location_id,
          name: recording.location_name,
          address: recording.location_address
        },
        recording_date: recording.recording_date,
        uploaded_at: recording.uploaded_at,
        status: recording.status,
        transcription: recording.transcription,
        transcribed_at: recording.transcribed_at,
        metadata: recording.metadata
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏'
    });
  }
});

// GET /api/recordings/:id/audio - –ü–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª
router.get('/:id/audio', authenticateToken, async (req, res) => {
  try {
    const recording = await db.getRecordingById(req.params.id);
    
    if (!recording) {
      return res.status(404).json({
        success: false,
        message: '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (req.user.role !== 'admin' && recording.user_id !== req.user.id) {
      return res.status(403).json({
        success: false,
        message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'
      });
    }

    if (!recording.audio_data) {
      return res.status(404).json({
        success: false,
        message: '–ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
      });
    }

    res.set({
      'Content-Type': recording.mime_type || 'audio/mpeg',
      'Content-Length': recording.audio_data.length,
      'Content-Disposition': `attachment; filename="${recording.original_filename}"`
    });

    res.send(recording.audio_data);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏–æ:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞'
    });
  }
});

// POST /api/recordings/:id/transcribe - –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–ø–∏—Å–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
router.post('/:id/transcribe', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const recording = await db.getRecordingById(req.params.id);
    
    if (!recording) {
      return res.status(404).json({
        success: false,
        message: '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    if (recording.transcription) {
      return res.json({
        success: true,
        message: '–ó–∞–ø–∏—Å—å —É–∂–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∞',
        transcription: recording.transcription,
        transcribed_at: recording.transcribed_at
      });
    }

    if (!recording.audio_data) {
      return res.status(400).json({
        success: false,
        message: '–ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
      });
    }

    console.log('üìù –ù–∞—á–∏–Ω–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∑–∞–ø–∏—Å–∏ ID:', req.params.id);

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è Whisper
    const tempFilePath = path.join('uploads', `temp_${recording.id}_${Date.now()}.m4a`);
    fs.writeFileSync(tempFilePath, recording.audio_data);

    try {
          // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π Whisper
    const transcription = await transcribeWithLocalWhisper(tempFilePath);

      console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ ID:', req.params.id);

      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const updatedRecording = await db.updateRecordingTranscription(req.params.id, transcription);

      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      fs.unlink(tempFilePath, (err) => {
        if (err) console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', err);
      });

      res.json({
        success: true,
        message: '–õ–æ–∫–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
        transcription: transcription,
        transcribed_at: updatedRecording.transcribed_at
      });

    } catch (transcriptionError) {
      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      fs.unlink(tempFilePath, (err) => {
        if (err) console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', err);
      });
      throw transcriptionError;
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:', error);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let userMessage = '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏';
    
    if (error.message.includes('python')) {
      userMessage = 'Python –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';
    } else if (error.message.includes('whisper')) {
      userMessage = 'Whisper –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';
    } else if (error.message.includes('ffmpeg')) {
      userMessage = 'FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';
    } else if (error.message.includes('memory') || error.message.includes('CUDA')) {
      userMessage = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }
    
    res.status(500).json({
      success: false,
      message: userMessage,
      technical_error: error.message
    });
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ Whisper
async function transcribeWithLocalWhisper(audioFilePath, language = 'ru', modelSize = 'base') {
  return new Promise((resolve, reject) => {
    const { spawn } = require('child_process');
    
    // –í—ã–∑—ã–≤–∞–µ–º Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    const pythonProcess = spawn('python3', [
      path.join(__dirname, '..', '..', 'transcription_service.py'),
      audioFilePath,
      language,
      modelSize
    ], {
      stdio: ['pipe', 'pipe', 'pipe']
    });

    let stdout = '';
    let stderr = '';

    pythonProcess.stdout.on('data', (data) => {
      stdout += data.toString();
    });

    pythonProcess.stderr.on('data', (data) => {
      stderr += data.toString();
    });

    pythonProcess.on('close', (code) => {
      if (code !== 0) {
        console.error('‚ùå –û—à–∏–±–∫–∞ Python –ø—Ä–æ—Ü–µ—Å—Å–∞:', stderr);
        reject(new Error(`Python –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}: ${stderr}`));
        return;
      }

      try {
        // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç –æ—Ç Python —Å–∫—Ä–∏–ø—Ç–∞
        const result = JSON.parse(stdout.trim());
        
        if (result.success) {
          resolve(result.text);
        } else {
          reject(new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏'));
        }
      } catch (parseError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞:', parseError);
        console.error('–í—ã–≤–æ–¥ Python:', stdout);
        reject(new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Whisper: ${parseError.message}`));
      }
    });

    pythonProcess.on('error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Python:', error);
      reject(new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Python: ${error.message}`));
    });
  });
}

// POST /api/recordings/:id/transcribe-text - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
router.post('/:id/transcribe-text', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const { transcription } = req.body;

    if (!transcription || typeof transcription !== 'string') {
      return res.status(400).json({
        success: false,
        message: '–¢–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
      });
    }

    const recording = await db.getRecordingById(req.params.id);
    
    if (!recording) {
      return res.status(404).json({
        success: false,
        message: '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –¥–ª—è –∑–∞–ø–∏—Å–∏ ID:', req.params.id);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const updatedRecording = await db.updateRecordingTranscription(req.params.id, transcription.trim());

    res.json({
      success: true,
      message: '–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞',
      transcription: transcription.trim(),
      transcribed_at: updatedRecording.transcribed_at
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏'
    });
  }
});

// GET /api/recordings/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–∏—Å–µ–π
router.get('/stats', authenticateToken, async (req, res) => {
  try {
    const stats = await db.getRecordingsStats();
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    let userStats = null;
    if (req.user.role === 'admin') {
      userStats = stats;
    } else {
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userRecordings = await db.getRecordingsByUser(req.user.id, 1000, 0);
      userStats = {
        total_recordings: userRecordings.length,
        transcribed_recordings: userRecordings.filter(r => r.transcription).length,
        total_duration_seconds: userRecordings.reduce((sum, r) => sum + (r.duration_seconds || 0), 0),
        avg_duration_seconds: userRecordings.length > 0 ? 
          userRecordings.reduce((sum, r) => sum + (r.duration_seconds || 0), 0) / userRecordings.length : 0
      };
    }

    res.json({
      success: true,
      stats: {
        total_recordings: parseInt(userStats.total_recordings),
        transcribed_recordings: parseInt(userStats.transcribed_recordings),
        pending_transcriptions: parseInt(userStats.total_recordings) - parseInt(userStats.transcribed_recordings),
        unique_users: userStats.unique_users ? parseInt(userStats.unique_users) : null,
        unique_locations: userStats.unique_locations ? parseInt(userStats.unique_locations) : null,
        total_duration_seconds: parseInt(userStats.total_duration_seconds || 0),
        avg_duration_seconds: Math.round(parseFloat(userStats.avg_duration_seconds || 0))
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
    });
  }
});

module.exports = router; 