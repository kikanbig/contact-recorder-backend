#!/usr/bin/env python3
"""
–°–µ—Ä–≤–∏—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —á–µ—Ä–µ–∑ WhisperX —Å –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–µ–π
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ –≥–æ–≤–æ—Ä—è—â–∏–º
"""

import sys
import os
import json
import tempfile
import torch
import whisperx
from pathlib import Path

def transcribe_audio_with_diarization(audio_data, language='ru', model_size='small'):
    """
    –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ WhisperX —Å –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–µ–π
    
    Args:
        audio_data: –ë–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
        language: –Ø–∑—ã–∫ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'ru')
        model_size: –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏ ('tiny', 'base', 'small', 'medium', 'large')
    
    Returns:
        dict: {'success': bool, 'text': str, 'segments': list, 'speakers': list, 'error': str}
    """
    try:
        print(f"üöÄ –ó–∞–≥—Ä—É–∂–∞–µ–º WhisperX –º–æ–¥–µ–ª—å: {model_size}", file=sys.stderr)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        device = "cuda" if torch.cuda.is_available() else "cpu"
        compute_type = "float16" if device == "cuda" else "int8"
        
        print(f"üíª –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device} —Å —Ç–∏–ø–æ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–π: {compute_type}", file=sys.stderr)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞—É–¥–∏–æ
        with tempfile.NamedTemporaryFile(suffix='.m4a', delete=False) as temp_file:
            temp_file.write(audio_data)
            temp_path = temp_file.name
        
        try:
            # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å WhisperX
            model = whisperx.load_model(model_size, device, compute_type=compute_type, language=language)
            
            # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ
            print(f"üéµ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª: {temp_path}", file=sys.stderr)
            audio = whisperx.load_audio(temp_path)
            
            # 3. –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
            print("üéØ –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é...", file=sys.stderr)
            result = model.transcribe(audio, batch_size=16)
            
            # 4. –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ (alignment) –¥–ª—è —Ç–æ—á–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–∏
            print("‚è∞ –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫...", file=sys.stderr)
            model_a, metadata = whisperx.load_align_model(language_code=language, device=device)
            result = whisperx.align(result["segments"], model_a, metadata, audio, device, return_char_alignments=False)
            
            # 5. –î–∏–∞—Ä–∏–∑–∞—Ü–∏—è (—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥–æ–≤–æ—Ä—è—â–∏–º)
            print("üë• –í—ã–ø–æ–ª–Ω—è–µ–º –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é (—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥–æ–≤–æ—Ä—è—â–∏–º)...", file=sys.stderr)
            diarize_model = whisperx.DiarizationPipeline(use_auth_token=None, device=device)
            diarize_segments = diarize_model(audio)
            
            # 6. –ù–∞–∑–Ω–∞—á–∞–µ–º –≥–æ–≤–æ—Ä—è—â–∏—Ö –∫ —Å–µ–≥–º–µ–Ω—Ç–∞–º
            print("üè∑Ô∏è –ù–∞–∑–Ω–∞—á–∞–µ–º –≥–æ–≤–æ—Ä—è—â–∏—Ö –∫ —Å–µ–≥–º–µ–Ω—Ç–∞–º...", file=sys.stderr)
            result = whisperx.assign_word_speakers(diarize_segments, result)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            segments_with_speakers = []
            speakers = set()
            full_text = ""
            
            current_speaker = None
            current_text = ""
            
            for segment in result["segments"]:
                speaker = segment.get("speaker", "–ù–ï–ò–ó–í–ï–°–¢–ù–´–ô")
                text = segment["text"].strip()
                start = segment.get("start", 0)
                end = segment.get("end", 0)
                
                speakers.add(speaker)
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã –æ–¥–Ω–æ–≥–æ –≥–æ–≤–æ—Ä—è—â–µ–≥–æ
                if speaker == current_speaker:
                    current_text += " " + text
                else:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–µ–≥–º–µ–Ω—Ç
                    if current_speaker is not None and current_text:
                        segments_with_speakers.append({
                            "speaker": current_speaker,
                            "text": current_text.strip(),
                            "start": segment_start,
                            "end": segment_end
                        })
                        full_text += f"\n[{current_speaker}]: {current_text.strip()}"
                    
                    # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç
                    current_speaker = speaker
                    current_text = text
                    segment_start = start
                    segment_end = end
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç
            if current_speaker is not None and current_text:
                segments_with_speakers.append({
                    "speaker": current_speaker,
                    "text": current_text.strip(),
                    "start": segment_start,
                    "end": segment_end
                })
                full_text += f"\n[{current_speaker}]: {current_text.strip()}"
            
            full_text = full_text.strip()
            speakers_list = sorted(list(speakers))
            
            print(f"‚úÖ WhisperX —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞", file=sys.stderr)
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –≥–æ–≤–æ—Ä—è—â–∏—Ö: {len(speakers_list)} ({', '.join(speakers_list)})", file=sys.stderr)
            print(f"üìù –°–µ–≥–º–µ–Ω—Ç–æ–≤: {len(segments_with_speakers)}", file=sys.stderr)
            print(f"üìÑ –°–∏–º–≤–æ–ª–æ–≤: {len(full_text)}", file=sys.stderr)
            
            return {
                'success': True,
                'text': full_text,
                'segments': segments_with_speakers,
                'speakers': speakers_list,
                'speaker_count': len(speakers_list),
                'language': language,
                'error': None
            }
        
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.unlink(temp_path)
            except:
                pass
                
    except Exception as e:
        error_message = str(e)
        print(f"‚ùå –û—à–∏–±–∫–∞ WhisperX —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {error_message}", file=sys.stderr)
        return {
            'success': False,
            'text': '',
            'segments': [],
            'speakers': [],
            'speaker_count': 0,
            'error': error_message
        }

def transcribe_audio(audio_data, language='ru', model_size='small'):
    """
    –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–µ–π
    """
    return transcribe_audio_with_diarization(audio_data, language, model_size)

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ Node.js
    –û–∂–∏–¥–∞–µ—Ç –ø—É—Ç—å –∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª—É –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    """
    if len(sys.argv) < 2:
        print(json.dumps({
            'success': False,
            'error': '–ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª—É'
        }, ensure_ascii=False))
        sys.exit(1)
    
    audio_file_path = sys.argv[1]
    language = sys.argv[2] if len(sys.argv) > 2 else 'ru'
    model_size = sys.argv[3] if len(sys.argv) > 3 else 'small'
    
    try:
        print(f"üìÇ –ß–∏—Ç–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª: {audio_file_path}", file=sys.stderr)
        
        # –ß–∏—Ç–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
        with open(audio_file_path, 'rb') as f:
            audio_data = f.read()
        
        print(f"üì¶ –†–∞–∑–º–µ—Ä –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞: {len(audio_data)} –±–∞–π—Ç", file=sys.stderr)
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º —Å WhisperX –∏ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–µ–π
        result = transcribe_audio_with_diarization(audio_data, language, model_size)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è Node.js (—Ç–æ–ª—å–∫–æ –≤ stdout)
        print(json.dumps(result, ensure_ascii=False))
        
    except Exception as e:
        print(json.dumps({
            'success': False,
            'error': f'–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}'
        }, ensure_ascii=False))
        sys.exit(1)

if __name__ == '__main__':
    main() 