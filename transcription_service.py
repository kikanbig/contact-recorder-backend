#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Å–µ—Ä–≤–∏—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —á–µ—Ä–µ–∑ Faster-Whisper
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —É—Å–∫–æ—Ä–µ–Ω–∏–µ–º –¥–æ 4x
"""

import sys
import os
import json
import tempfile
from pathlib import Path
from faster_whisper import WhisperModel

def transcribe_audio(audio_data, language='ru', model_size='small'):
    """
    –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Faster-Whisper
    
    Args:
        audio_data: –ë–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
        language: –Ø–∑—ã–∫ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'ru')
        model_size: –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏ ('tiny', 'base', 'small', 'medium', 'large')
    
    Returns:
        dict: {'success': bool, 'text': str, 'error': str}
    """
    try:
        print(f"üöÄ –ó–∞–≥—Ä—É–∂–∞–µ–º Faster-Whisper –º–æ–¥–µ–ª—å: {model_size}", file=sys.stderr)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å Faster-Whisper (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç—Å—è)
        # compute_type="int8" –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏ –∏ —É—Å–∫–æ—Ä–µ–Ω–∏—è
        model = WhisperModel(
            model_size, 
            device="cpu",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º CPU (–º–æ–∂–Ω–æ "cuda" –µ—Å–ª–∏ –µ—Å—Ç—å GPU)
            compute_type="int8"  # –ö–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        )
        
        print(f"‚úÖ Faster-Whisper –º–æ–¥–µ–ª—å {model_size} –∑–∞–≥—Ä—É–∂–µ–Ω–∞", file=sys.stderr)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞—É–¥–∏–æ
        with tempfile.NamedTemporaryFile(suffix='.m4a', delete=False) as temp_file:
            temp_file.write(audio_data)
            temp_path = temp_file.name
        
        try:
            print(f"üéµ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª: {temp_path}", file=sys.stderr)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å Faster-Whisper
            segments, info = model.transcribe(
                temp_path,
                language=language,
                beam_size=1,  # –£–º–µ–Ω—å—à–∞–µ–º –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5)
                best_of=1,    # –£–º–µ–Ω—å—à–∞–µ–º –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5)
                temperature=0.0,  # –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                vad_filter=True,  # –§–∏–ª—å—Ç—Ä –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
                vad_parameters=dict(min_silence_duration_ms=500)
            )
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
            transcription_text = ""
            for segment in segments:
                transcription_text += segment.text
            
            transcription_text = transcription_text.strip()
            
            print(f"‚úÖ Faster-Whisper —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(transcription_text)} —Å–∏–º–≤–æ–ª–æ–≤", file=sys.stderr)
            print(f"üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–π —è–∑—ã–∫: {info.language} (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {info.language_probability:.2f})", file=sys.stderr)
            
            return {
                'success': True,
                'text': transcription_text,
                'language': info.language,
                'language_probability': info.language_probability,
                'duration': info.duration,
                'error': None
            }
        
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.unlink(temp_path)
            except:
                pass
                
    except Exception as e:
        error_message = str(e)
        print(f"‚ùå –û—à–∏–±–∫–∞ Faster-Whisper —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {error_message}", file=sys.stderr)
        return {
            'success': False,
            'text': '',
            'error': error_message
        }

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ Node.js
    –û–∂–∏–¥–∞–µ—Ç –ø—É—Ç—å –∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª—É –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    """
    if len(sys.argv) < 2:
        print(json.dumps({
            'success': False,
            'error': '–ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª—É'
        }, ensure_ascii=False))
        sys.exit(1)
    
    audio_file_path = sys.argv[1]
    language = sys.argv[2] if len(sys.argv) > 2 else 'ru'
    model_size = sys.argv[3] if len(sys.argv) > 3 else 'small'
    
    try:
        print(f"üìÇ –ß–∏—Ç–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª: {audio_file_path}", file=sys.stderr)
        
        # –ß–∏—Ç–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
        with open(audio_file_path, 'rb') as f:
            audio_data = f.read()
        
        print(f"üì¶ –†–∞–∑–º–µ—Ä –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞: {len(audio_data)} –±–∞–π—Ç", file=sys.stderr)
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º —Å Faster-Whisper
        result = transcribe_audio(audio_data, language, model_size)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è Node.js (—Ç–æ–ª—å–∫–æ –≤ stdout)
        print(json.dumps(result, ensure_ascii=False))
        
    except Exception as e:
        print(json.dumps({
            'success': False,
            'error': f'–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}'
        }, ensure_ascii=False))
        sys.exit(1)

if __name__ == '__main__':
    main() 